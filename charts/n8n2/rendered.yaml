---
# Source: n8n/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: n8n/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: n8n/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
automountServiceAccountToken: false
---
# Source: n8n/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: n8n/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
type: Opaque
data:
  postgres-password: "aFVoNDgwWG0wRw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-database-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  DB_TYPE: "postgresdb"
  DB_POSTGRESDB_HOST: release-name-n8n-postgresql
  DB_POSTGRESDB_PORT: "5432"
  DB_POSTGRESDB_DATABASE: "n8n"
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-logging-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  N8N_LOG_LEVEL: "info"
  N8N_LOG_OUTPUT: "console"
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-diagnostics-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  N8N_DIAGNOSTICS_ENABLED: "false"
  N8N_DIAGNOSTICS_CONFIG_FRONTEND: ""
  N8N_DIAGNOSTICS_CONFIG_BACKEND: ""
  N8N_DIAGNOSTICS_POSTHOG_API_KEY: ""
  N8N_DIAGNOSTICS_POSTHOG_API_HOST: ""
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-version-notifications-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  N8N_VERSION_NOTIFICATIONS_ENABLED: "false"
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-public-api-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  N8N_PUBLIC_API_DISABLED: "false"
  N8N_PUBLIC_API_ENDPOINT: "api"
  N8N_PUBLIC_API_SWAGGERUI_DISABLED: "false"
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-n8n-workflow-history-configmap
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
data:
  N8N_WORKFLOW_HISTORY_ENABLED: "true"
  N8N_WORKFLOW_HISTORY_PRUNE_TIME: "336"
---
# Source: n8n/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: n8n/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: n8n/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5678
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: release-name
---
# Source: n8n/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: n8n
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        checksum/config: 9faaf7e254d1f2a3b7380910cca8837804a0063f0d02bb622798c64163d77873
      labels:
        helm.sh/chart: n8n-1.0.0
        app.kubernetes.io/name: n8n
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: release-name-n8n
      securityContext:
        {}
      containers:
        - name: n8n
          securityContext:
            {}
          image: "n8nio/n8n:1.76.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5678
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz/readiness
              port: http
          resources:
            {}
          env:
            - name: N8N_PATH
              value: "/n8nbis"
            - name: N8N_HIRING_BANNER_ENABLED
              value: "false"
            - name: NODE_ENV
              value: production
            - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
              value: "true"
            - name: N8N_PORT
              value: "5678"
            - name: N8N_DEFAULT_LOCALE
              value: "fr"
            - name: GENERIC_TIMEZONE
              value: "Europe/Paris"
            - name: N8N_GRACEFUL_SHUTDOWN_TIMEOUT
              value: "30"
            - name: DB_POSTGRESDB_USER
              value: postgres
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-n8n-postgresql
                  key: postgres-password
                  optional: true
          envFrom:
            - configMapRef:
                name: release-name-n8n-database-configmap
            - configMapRef:
                name: release-name-n8n-logging-configmap
            - configMapRef:
                name: release-name-n8n-diagnostics-configmap
            - configMapRef:
                name: release-name-n8n-version-notifications-configmap
            - configMapRef:
                name: release-name-n8n-public-api-configmap
            - configMapRef:
                name: release-name-n8n-workflow-history-configmap
            - secretRef:
                name: release-name-n8n-encryption-key-secret
---
# Source: n8n/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.4.5
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 17.2.0
        helm.sh/chart: postgresql-16.4.5
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: release-name-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.2.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "n8n"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=n8n" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=n8n" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: n8n/templates/ingress.yaml
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: release-name-n8n
  annotations:
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Tools
    gethomepage.dev/href: https://allapps.me/n8nbis
    gethomepage.dev/icon: n8n.png
    gethomepage.dev/name: N8n
    gethomepage.dev/pod-selector: ""
    gethomepage.dev/weight: "10"
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: PathPrefix(`/n8nbis`)
      services:
        - kind: Service
          name: release-name-n8n
          port: 5678
      middlewares:
              - name: middleware-strip
---
# Source: n8n/templates/middleware.yaml
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: release-name-n8n
spec:
  stripPrefix:
    prefixes:
      - /n8nbis
---
# Source: n8n/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-n8n-encryption-key-secret
  namespace: default
  labels:
    app: n8n
    chart: n8n-1.0.0
    release: release-name
    heritage: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  N8N_ENCRYPTION_KEY: "OHM1U2hNbW85SEVTQmp4M1Z3Vzd4WWs3eDNmRlFIYko="
